use std::collections::HashMap;

use crate::data::structs::stability::*;

impl From<Vec<(f64, f64, f64, f64)>> for VerticalAreaArray {
    fn from(src: Vec<(f64, f64, f64, f64)>) -> Self {
        Self {
            data: src
                .into_iter()
                .map(|(draught, area, moment_x, moment_z)| VerticalArea {
                    draught,
                    area,
                    moment_x,
                    moment_z,
                })
                .collect(),
            error: HashMap::new(),
        }
    }
}
//
#[allow(dead_code)]
pub(crate) fn area_v_stab() -> VerticalAreaArray {
    VerticalAreaArray::from(vec![
        (0.5,	1112.290476, 4333.19, 6257.034545),
        (1.,	1058.190476, 4209.05, 6216.424545),
        (1.4,	1013.990476, 4131.,	  6163.354545),
        (1.5,	1002.800476, 4115.29, 6147.134545),
        (2.,	946.1904762, 4063.37, 6048.024545),
        (2.5,	888.3904762, 4060.44, 5917.934545),
        (3.,	829.4904762, 4112.04, 5755.974545),
        (3.5,	769.9904762, 4188.28, 5562.624545),
        (4.,	710.3904762, 4257.,	  5339.044545),
        (4.5,	650.6604762, 4319.85, 5085.344545),
        (5.,	590.9904762, 4377.05, 4801.714545),
        (5.5,	531.0904762, 4429.38, 4487.694545),
        (6.,	471.1404762, 4478.34, 4142.774545),
        (6.5,	411.2304762, 4525.81, 3768.254545),
        (6.8,	375.2704762, 4554.,	  3529.164545),
    ])
}
