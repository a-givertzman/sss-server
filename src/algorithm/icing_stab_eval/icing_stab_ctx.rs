use crate::algorithm::entities::icing_stab::IcingStabType;
///
/// Общая структура для ввода данных. Содержит все данные
/// для расчетов.
#[derive(Debug, Clone)]
pub struct IcingStabCtx {
    /// Тип обледенения
    pub icing_stab: IcingStabType,
    /// Масса льда на квадратный метр площади горизонтальной поверхности
    /// палубного лесного груза
    pub icing_m_timber: f64,
    /// Масса льда на квадратный метр площади парусности
    /// при учете полного обледенения
    pub icing_m_v_full: f64,
    /// Масса льда на квадратный метр площади парусности  
    /// при учете частичного обледенения
    pub icing_m_v_half: f64,
    /// Масса льда на квадратный метр площади горизонтальной
    /// поверхности при учете полного обледенения
    pub icing_m_h_full: f64,
    /// Масса льда на квадратный метр площади горизонтальной  
    /// поверхности при учете частичного обледенения
    pub icing_m_h_half: f64,
    /// Коэффициент площади парусности несплощной
    /// поверхности при учете полного обледенения
    pub icing_coef_v_area_full: f64,
    /// Коэффициент площади парусности несплощной
    /// поверхности при учете частичного обледенения
    pub icing_coef_v_area_half: f64,
    /// Коэффициент площади парусности несплощной
    /// поверхности при отсутствии обледенения
    pub icing_coef_v_area_zero: f64,
    /// Коэффициент увеличения статического момента
    /// площади парусности несплощной поверхности
    /// при учете полного обледенения
    pub icing_coef_v_moment_full: f64,
    /// Коэффициент увеличения статического момента
    /// площади парусности несплощной поверхности
    /// при учете частичного обледенения
    pub icing_coef_v_moment_half: f64,
    /// Коэффициент увеличения статического момента
    /// площади парусности несплощной поверхности
    /// при отсутствии обледенения
    pub icing_coef_v_moment_zero: f64,
}
//
//
// impl Default for AreasStrengthCtx {
//     ///
//     /// Struct constructor
//     /// - 'storage_initial_data' - [Storage] instance, where store initial data
//     fn default() -> Self {
//         Self {
//             bounds: None,
//         }
//     }
// }
